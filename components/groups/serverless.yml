service: cis-serverless-backend-groups

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  memorySize: 128 # Overwrite the default memory size. Default is 1024
  timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  deploymentBucket: 
  
  environment:
    GROUPS_DYNAMODB_TABLE: ${self:service}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GROUPS_DYNAMODB_TABLE}"

package:
  excludeDevDependencies: true

functions:
  create:
    name: createGroups
    handler: create.create
    events:
      - http:
          path: groups
          method: post
          cors: true
          authorizer:
            name: GroupAuthorizer
            arn: arn:aws:cognito-idp:us-east-1:745539300020:userpool/us-east-1_Iz6DhxAP7
            identitySource: method.request.header.Authorization
            type: token

  get:
    name: getGroups
    handler: get.get
    events:
      - http:
          path: groups
          method: get
          cors: true
          authorizer:
            name: GroupAuthorizer
            arn: arn:aws:cognito-idp:us-east-1:745539300020:userpool/us-east-1_Iz6DhxAP7
            identitySource: method.request.header.Authorization
            type: token

  list:
    name: listGroups
    handler: list.list
    events:
      - http:
          path: groups/list
          method: get
          cors: true
          authorizer:
            name: GroupAuthorizer
            arn: arn:aws:cognito-idp:us-east-1:745539300020:userpool/us-east-1_Iz6DhxAP7
            identitySource: method.request.header.Authorization
            type: token        

  update:
    name: updateGroups
    handler: update.update
    events:
      - http:
          path: groups/{name}
          method: put
          cors: true
          authorizer:
            name: GroupAuthorizer
            arn: arn:aws:cognito-idp:us-east-1:745539300020:userpool/us-east-1_Iz6DhxAP7
            identitySource: method.request.header.Authorization
            type: token

  delete:
    name: deleteGroups
    handler: delete.delete
    events:
      - http:
          path: groups/delete
          method: delete
          cors: true     